#ifndef SHADERPRO_H__
#define SHADERPRO_H__

#include <string>
#include <vector>
#include "ngl/Util.h"

#include "TextureData.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file ShaderPro.h
/// @brief class containing data for a single shader
/// @author Felix Marrington-Reeve
/// @version 0.1
/// @struct ShaderPro
/// @brief ShaderPro seems complex but this allows the data to be managed away from a user.
/// It does a lot for the user such as loading source, linking and compiling
//----------------------------------------------------------------------------------------------------------------------
struct ShaderPro
{
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief contructor initialises values to 0
  //----------------------------------------------------------------------------------------------------------------------
  ShaderPro();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief destructor deletes framebuffers
  //----------------------------------------------------------------------------------------------------------------------
  ~ShaderPro();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief compile the source code to be used by the shader library
  //----------------------------------------------------------------------------------------------------------------------
  void compile();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load source code for the vertex shader, including adding the BaseVertex code
  //----------------------------------------------------------------------------------------------------------------------
  void loadVertSource();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load source code for the frag shader, including adding the BaseVertex code
  //----------------------------------------------------------------------------------------------------------------------
  void loadFragSource();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief loads text from a file
  /// @param[in] _fileName the text file containing data for a shader
  /// @returns the text from the file
  //----------------------------------------------------------------------------------------------------------------------
  std::string loadSource(const std::string &_fileName);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load fragment base code to add to fragment glsl file
  /// @returns the text from the file as well as any texture uniforms required
  //----------------------------------------------------------------------------------------------------------------------
  std::string getFragBase();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load the textures from their source files
  //----------------------------------------------------------------------------------------------------------------------
  void loadTextures();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief link the textures to the shader
  //----------------------------------------------------------------------------------------------------------------------
  void texturesToShader();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief read an image from a file to a Gl texture
  /// @param[in] _textureUnit the texture number, eg 0, 1, 2 as shaders can have multiple textures
  /// @param[in] _texture struct containing all information of the shader
  /// @param[in] _type the type of shader to load, all GL_TEXTURE_2D at the moment
  //----------------------------------------------------------------------------------------------------------------------
  void loadImage(int _textureUnit, TextureData _texture, GLenum _type);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief prints most values contained within the shader, useful for debugging
  //----------------------------------------------------------------------------------------------------------------------
  void printShaderData();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief enum used for debugging
  //----------------------------------------------------------------------------------------------------------------------
  enum class DebugMode {COMPILE, LINK};
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief prints info from shader compile, for checking errors
  //----------------------------------------------------------------------------------------------------------------------
  void printInfoLog(GLuint _id, DebugMode _mode);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief creates data required for frame buffer (still in progress)
  //----------------------------------------------------------------------------------------------------------------------
  void setUpFramebuffer();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief name given to shader in text file, eg "MAIN"
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_name;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief shader program ID, used by openGL
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_progID;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief fragment shader ID
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_fragID;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vertex shader ID
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_vertID;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief framebuffer ID, if it has one, otherwise is set to 0
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_outBufferID;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief texture ID coming out if it renders to a framebuffer
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_outTextureID;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief out depth stencil id, used for rendering to a frame buffer
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_outDepthStencilID;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief source file of frament shader
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_fragFile;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief source file of vertex shader
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_vertFile;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of TextureData structs
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<TextureData> m_textures;
};

#endif
