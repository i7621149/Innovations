#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include "ngl/Camera.h"
#include "ngl/Colour.h"
#include "ngl/Light.h"
#include "ngl/Text.h"
#include <QOpenGLWindow>
#include <QOpenGLTexture>
#include <QTime>
#include <vector>
#include <memory>
#include <array>
#include "Background.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief inherets from QOpenGLWindow, uses ngl to draw openGL
/// @author Felix Marrington-Reeve
/// @version 0.1
/// @class NGLScene
/// @brief this contains the major management and drawing functions of our programs
//----------------------------------------------------------------------------------------------------------------------
class NGLScene : public QOpenGLWindow
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief initialise variables not dependent on OpenGL or ngl
  //----------------------------------------------------------------------------------------------------------------------
  NGLScene();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief destructor prints message
  //----------------------------------------------------------------------------------------------------------------------
  ~NGLScene();

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief initialise shaders and variables etc, after initialising ngl
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief render scene, called upon update(), which is called in timerEvent
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon resizing window
  /// @param[in] _event Qt resize event containing new width and height
  //----------------------------------------------------------------------------------------------------------------------
  // Qt 5.5.1 must have this implemented and uses it
  void resizeGL(QResizeEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon resizing window
  /// @param[in] _w width of window
  /// @param[in] _h height of window
  //----------------------------------------------------------------------------------------------------------------------
  // Qt 5.x uses this instead! http://doc.qt.io/qt-5/qopenglwindow.html#resizeGL
  void resizeGL(int _w, int _h);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon hitting a key
  /// @param[in] _event Qt key event containing key info, such as type
  //----------------------------------------------------------------------------------------------------------------------
  void keyPressEvent(QKeyEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon releasing a key
  /// @param[in] _event Qt key event containing key info, such as type
  //----------------------------------------------------------------------------------------------------------------------
  void keyReleaseEvent(QKeyEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon moving the mouse
  /// @param[in] _event Qt mouse event containing mouse position etc
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (QMouseEvent * _event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon pressing the mouse
  /// @param[in] _event Qt mouse event containing mouse position etc
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent ( QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon releasing the mouse
  /// @param[in] _event Qt mouse event containing mouse position etc
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent ( QMouseEvent *_event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called upon scrolling
  /// @param[in] _event Qt mousewheel event
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent( QWheelEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called every timer event
  /// @param[in] _event Qt timer event, can be used if multiple timers are set up
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(QTimerEvent *_event);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief toggle program between normal and fullscreen
  //----------------------------------------------------------------------------------------------------------------------
  void toggleFullScreen();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief screen width
  //----------------------------------------------------------------------------------------------------------------------
  int m_width;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief screen height
  //----------------------------------------------------------------------------------------------------------------------
  int m_height;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief whether program is in fullscreen mode
  //----------------------------------------------------------------------------------------------------------------------
  bool m_fullScreen;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief whether mouse is pressed
  //----------------------------------------------------------------------------------------------------------------------
  bool m_mouseDown;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to check elapsed time, set to time of program start
  //----------------------------------------------------------------------------------------------------------------------
  QTime m_time;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief milliseconds taken to render last frame
  //----------------------------------------------------------------------------------------------------------------------
  int m_lastFrameTime;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief mouse data.
  /// x, y: mouse position if m_mouseDown (else last position when m_mouseDown)
  /// z, w: initial mouse position on click (if mouse is up, is negative)
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 m_mouseData;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief scene camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief background entity, single quad
  //----------------------------------------------------------------------------------------------------------------------
  Background m_background;
};

#endif
